{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Development Environment",
    "Parameters": {
        "KeyPairName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "String",
            "MinLength": "3",
            "MaxLength": "255",
            "AllowedPattern": "[\\x20-\\x7E]*",
            "ConstraintDescription": "can contain only ASCII characters."
        },
        "ManagedPolicyEC2ServiceRoleArn": {
            "Type": "String",
            "Description": "CodeDeploy managed policy",
            "Default": "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy"
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": { "AMI": "ami-032930428bf1abbff" }
        }
    },
    "Resources": {
        "RoleEC2Deployment": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Description": "Allows CodeDeploy to call AWS services such as Auto Scaling on your behalf.",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    {
                        "Ref": "ManagedPolicyEC2ServiceRoleArn"
                    }
                ]
            }
        },
        "EC2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "InstanceProfileName": "EC2InstanceProfile",
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "RoleEC2Deployment"
                    }
                ]
            }
        },
        "VPCApp": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "175.31.0.0/16",
                "InstanceTenancy": "default",
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "Tags": [{ "Key": "Name", "Value": "Sample-App" }] 
            }
        },
        "SubnetAZa": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "175.31.0.0/20",
                "AvailabilityZone": "us-east-1a",
                "VpcId": {
                    "Ref": "VPCApp"
                },
                "Tags": [{ "Key": "Name", "Value": "SubnetAZa" }] 
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {}
        },
        "Ec2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "KeyName": {"Ref": "KeyPairName" },
                "InstanceType": "t2.micro",
                "IamInstanceProfile": { "Ref" : "EC2InstanceProfile" },
                "Monitoring": "false",
                "ImageId": { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AMI" ] },
                "UserData": { "Fn::Base64": { "Fn::Join" : ["", [
                    "#!/bin/bash\n",
                    "sudo yum update -y\n",
                    "wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install \n",
                    "chmod +x ./install\n",
                    "sudo ./install auto \n"
                ]]}},
                "Tags": [{ "Key": "Name", "Value": "Sample-instance" }, { "Key": "Environment", "Value": "dev" }],
                "NetworkInterfaces": [
                    {
                        "DeleteOnTermination": "true",
                        "Description": "Primary network interface",
                        "DeviceIndex": 0,
                        "SubnetId": { "Ref": "SubnetAZa" },
                        "GroupSet": [{ "Ref": "SecurityGroupSampleApp" }],
                        "AssociatePublicIpAddress": "true"
                    }
                ]
            }
        },
        "SecurityGroupSampleApp": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SecurityGroup Sample App",
                "VpcId": { "Ref": "VPCApp" },
                "Tags": [{ "Key": "Name", "Value": "SG_SampleApp" }]
            }
        },
        "IgwAttach": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCApp"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "RoutingTable":
        {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCApp"
                },
                "Tags": [{ "Key": "Name", "Value": "RT_Public" }]
            }
        },
        "PublicRoute":
        {
          "Type": "AWS::EC2::Route",
          "Properties":
            {
              "DestinationCidrBlock": "0.0.0.0/0",
              "RouteTableId": { "Ref": "RoutingTable" },
              "GatewayId": { "Ref": "InternetGateway" }
            },
          "DependsOn": "IgwAttach"
        },
        "PublicSubnetAssoc":
        {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties":
            {
                "RouteTableId": { "Ref": "RoutingTable" },
                "SubnetId": { "Ref": "SubnetAZa"}
            }
        },
        "INgressSSH": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "SecurityGroupSampleApp"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "INgressWeb": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "SecurityGroupSampleApp"
                },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "Egress1": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "SecurityGroupSampleApp"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        }
    },
    "Outputs": {
        "VPCId": {
            "Description": "VPCId of the newly created VPC",
            "Value": { "Ref": "VPCApp" }
        },
        "InstanceId": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": { "Ref": "Ec2Instance" }
        },
        "AZ": {
            "Description": "Availability Zone of the newly created EC2 instance",
            "Value": { "Fn::GetAtt": [ "Ec2Instance", "AvailabilityZone" ] }
        },
        "PublicIP": {
            "Description": "Public IP address of the newly created EC2 instance",
            "Value": { "Fn::GetAtt": [ "Ec2Instance", "PublicIp" ] }
        },
        "PublicDNS": {
            "Description": "Public DNSName of the newly created EC2 instance",
            "Value": { "Fn::GetAtt": [ "Ec2Instance", "PublicDnsName" ] }
        }
    }
}